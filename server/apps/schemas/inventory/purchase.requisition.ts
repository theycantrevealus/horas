import { IAccount } from '@gateway_core/account/interface/account.create_by'
import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'
import { AccountJoin } from '@schemas/account/account.raw'
import { ApprovalHistory, IApprovalHistory } from '@schemas/approval.history'
import { ILocale, LocaleJoin } from '@schemas/locale'
import { HydratedDocument, SchemaTypes } from 'mongoose'

import { IMaterialRequisition } from './material.requisition.interface'
import { MaterialRequisitionJoin } from './material.requisition.join'
import { PurchaseRequisitionDetail } from './purchase.requisition.detail'
import { IPurchaseRequisitionDetail } from './purchase.requisition.detail.interface'

export type PurchaseRequisitionDocument = HydratedDocument<PurchaseRequisition>

/**
 * @class PurchaseRequisition
 * @description If stock is not avail, user could consider to ask procurement to purchase
 * Purchase Requisition (PR) is a formal document or request used to initiate the procurement process for goods or services.
 * It's typically generated by a department or employee within an organization to request the purchase of specific items or services.
 */
@Schema({
  collection: 'inventory_purchase_requisition',
})
export class PurchaseRequisition {
  /**
   * Unique identifier
   * @type { string }
   */
  @Prop({ type: SchemaTypes.String, unique: true })
  id: string

  /**
   * @type { ILocale }
   * @description Stock adjustment locale
   */
  @Prop(LocaleJoin)
  locale: ILocale

  /**
   * @type { string }
   * @description Adjustment code (it will generated if not defined)
   */
  @Prop({
    type: SchemaTypes.String,
    required: true,
    unique: true,
  })
  code: string

  @Prop({
    type: SchemaTypes.Date,
    default: () => new Date(),
    required: true,
  })
  transaction_date: Date

  @Prop(MaterialRequisitionJoin)
  material_requisition: IMaterialRequisition

  /**
   * @type { IPurchaseRequisitionDetail }
   * @description Purchase requisition detail
   */
  @Prop({
    type: [PurchaseRequisitionDetail],
    _id: false,
  })
  detail: IPurchaseRequisitionDetail[]

  /**
   * @type { string }
   * @enum {'new' | 'need_approval' | 'approved' | 'declined' }
   * @description Status of the adjustment. Possible values:
   * - 'new': PR created by main stock point. Will shown on procurement staff to check
   * - 'need_approval': PR need approval from procurement supervisor
   * - 'approved': Approved by supervisor to purchasing
   * - 'declined': PR declined
   * - 'cancelled': PR cancelled
   * @default 'new'
   */
  @Prop({
    type: SchemaTypes.String,
    enum: ['new', 'need_approval', 'approved', 'declined', 'cancelled'],
    default: 'new',
  })
  status: string

  /**
   * @type { IApprovalHistory[] }
   * @description History of document approval procedure
   */
  @Prop({ type: [ApprovalHistory], _id: false })
  approval_history: IApprovalHistory[]

  /**
   * @type { any }
   * @description Additional field for extra data
   */
  @Prop({ type: SchemaTypes.Mixed, required: false })
  extras: any

  /**
   * @type { string }
   * @description Adjustment remark
   */
  @Prop({ type: SchemaTypes.String })
  remark: string

  /**
   * @type { IAccount }
   * @description Account who create the adjustment
   */
  @Prop(AccountJoin)
  created_by: IAccount

  /**
   * @type { Date }
   * @description System record of created time
   */
  @Prop({
    type: SchemaTypes.Date,
    default: () => new Date(),
    required: true,
  })
  created_at: Date

  /**
   * @type { Date }
   * @description System record of last update time
   */
  @Prop({
    type: SchemaTypes.Date,
    default: () => new Date(),
    required: true,
  })
  updated_at: Date

  /**
   * @type { Date }
   * @description System record of deleted time (soft-delete)
   */
  @Prop({ type: SchemaTypes.Mixed, default: null })
  deleted_at: Date | null
}

export const PurchaseRequisitionSchema =
  SchemaFactory.createForClass(PurchaseRequisition)
